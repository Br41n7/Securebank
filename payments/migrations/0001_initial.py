# Generated by Django 5.2.7 on 2025-10-20 20:36

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "method_type",
                    models.CharField(
                        choices=[
                            ("CARD", "Debit/Credit Card"),
                            ("BANK_TRANSFER", "Bank Transfer"),
                            ("USSD", "USSD"),
                            ("QR", "QR Code"),
                            ("MOBILE_MONEY", "Mobile Money"),
                        ],
                        max_length=20,
                        verbose_name="method type",
                    ),
                ),
                (
                    "card_last4",
                    models.CharField(
                        blank=True, max_length=4, verbose_name="card last 4"
                    ),
                ),
                (
                    "card_brand",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="card brand"
                    ),
                ),
                (
                    "card_expiry_month",
                    models.CharField(
                        blank=True, max_length=2, verbose_name="card expiry month"
                    ),
                ),
                (
                    "card_expiry_year",
                    models.CharField(
                        blank=True, max_length=4, verbose_name="card expiry year"
                    ),
                ),
                (
                    "card_signature",
                    models.TextField(blank=True, verbose_name="card signature"),
                ),
                (
                    "bank_name",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="bank name"
                    ),
                ),
                (
                    "account_number",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="account number"
                    ),
                ),
                (
                    "account_name",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="account name"
                    ),
                ),
                (
                    "nickname",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="nickname"
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(default=False, verbose_name="default method"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("INACTIVE", "Inactive"),
                            ("EXPIRED", "Expired"),
                            ("BLOCKED", "Blocked"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "paystack_authorization_code",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        verbose_name="Paystack authorization code",
                    ),
                ),
                (
                    "paystack_customer_code",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        verbose_name="Paystack customer code",
                    ),
                ),
                (
                    "paystack_email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="Paystack email"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_methods",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Method",
                "verbose_name_plural": "Payment Methods",
                "db_table": "payments_payment_method",
                "ordering": ["-is_default", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentTransaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="transaction reference"
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("DEPOSIT", "Deposit"),
                            ("WITHDRAWAL", "Withdrawal"),
                            ("TRANSFER", "Transfer"),
                            ("SERVICE_PAYMENT", "Service Payment"),
                            ("CRYPTO_PURCHASE", "Crypto Purchase"),
                            ("GIFTCARD_PURCHASE", "Gift Card Purchase"),
                        ],
                        max_length=20,
                        verbose_name="transaction type",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="NGN", max_length=3, verbose_name="currency"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "processing_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="processing fee",
                    ),
                ),
                (
                    "service_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="service fee",
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2, max_digits=15, verbose_name="total amount"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("INITIATED", "Initiated"),
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("SUCCESS", "Success"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                            ("REFUNDED", "Refunded"),
                        ],
                        default="INITIATED",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "paystack_reference",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Paystack reference"
                    ),
                ),
                (
                    "paystack_access_code",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Paystack access code"
                    ),
                ),
                (
                    "paystack_payment_url",
                    models.URLField(blank=True, verbose_name="Paystack payment URL"),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="IP address"
                    ),
                ),
                ("user_agent", models.TextField(blank=True, verbose_name="user agent")),
                (
                    "metadata",
                    models.JSONField(blank=True, default=dict, verbose_name="metadata"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "paid_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="paid at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "account",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_transactions",
                        to="accounts.bankaccount",
                    ),
                ),
                (
                    "payment_method",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="payments.paymentmethod",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Transaction",
                "verbose_name_plural": "Payment Transactions",
                "db_table": "payments_payment_transaction",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("PAYMENT_SUCCESS", "Payment Success"),
                            ("PAYMENT_FAILED", "Payment Failed"),
                            ("REFUND_PROCESSED", "Refund Processed"),
                            ("PAYMENT_METHOD_EXPIRED", "Payment Method Expired"),
                            ("PAYMENT_METHOD_ADDED", "Payment Method Added"),
                        ],
                        max_length=30,
                        verbose_name="notification type",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="title")),
                ("message", models.TextField(verbose_name="message")),
                ("is_read", models.BooleanField(default=False, verbose_name="read")),
                (
                    "email_sent",
                    models.BooleanField(default=False, verbose_name="email sent"),
                ),
                (
                    "sms_sent",
                    models.BooleanField(default=False, verbose_name="SMS sent"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "read_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="read at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "transaction",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="payments.paymenttransaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Notification",
                "verbose_name_plural": "Payment Notifications",
                "db_table": "payments_notification",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaystackCustomer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "customer_code",
                    models.CharField(
                        max_length=200, unique=True, verbose_name="customer code"
                    ),
                ),
                (
                    "customer_email",
                    models.EmailField(max_length=254, verbose_name="customer email"),
                ),
                (
                    "first_name",
                    models.CharField(max_length=100, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=100, verbose_name="last name"),
                ),
                (
                    "phone",
                    models.CharField(blank=True, max_length=20, verbose_name="phone"),
                ),
                (
                    "metadata",
                    models.JSONField(blank=True, default=dict, verbose_name="metadata"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="paystack_customer",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Paystack Customer",
                "verbose_name_plural": "Paystack Customers",
                "db_table": "payments_paystack_customer",
            },
        ),
        migrations.CreateModel(
            name="PaystackWebhook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("charge.success", "Charge Success"),
                            ("charge.failed", "Charge Failed"),
                            ("transfer.success", "Transfer Success"),
                            ("transfer.failed", "Transfer Failed"),
                            ("transfer.reversed", "Transfer Reversed"),
                            (
                                "customeridentification.failed",
                                "Customer Identification Failed",
                            ),
                            ("subscription.create", "Subscription Create"),
                            ("subscription.not_renew", "Subscription Not Renew"),
                            ("invoice.create", "Invoice Create"),
                            ("invoice.payment_failed", "Invoice Payment Failed"),
                            ("invoice.update", "Invoice Update"),
                        ],
                        max_length=50,
                        verbose_name="event type",
                    ),
                ),
                (
                    "reference",
                    models.CharField(max_length=100, verbose_name="reference"),
                ),
                ("data", models.JSONField(verbose_name="event data")),
                (
                    "processed",
                    models.BooleanField(default=False, verbose_name="processed"),
                ),
                (
                    "processing_attempts",
                    models.PositiveIntegerField(
                        default=0, verbose_name="processing attempts"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="error message"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="processed at"
                    ),
                ),
            ],
            options={
                "verbose_name": "Paystack Webhook",
                "verbose_name_plural": "Paystack Webhooks",
                "db_table": "payments_paystack_webhook",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["event_type"], name="payments_pa_event_t_6ff597_idx"
                    ),
                    models.Index(
                        fields=["reference"], name="payments_pa_referen_926815_idx"
                    ),
                    models.Index(
                        fields=["processed"], name="payments_pa_process_c93bfe_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Refund",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="refund reference"
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, max_digits=15, verbose_name="amount"
                    ),
                ),
                ("reason", models.TextField(verbose_name="reason")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "paystack_refund_reference",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        verbose_name="Paystack refund reference",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="notes")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="processed at"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "original_transaction",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="refunds",
                        to="payments.paymenttransaction",
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_refunds",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="refunds",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Refund",
                "verbose_name_plural": "Refunds",
                "db_table": "payments_refund",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="paymenttransaction",
            index=models.Index(
                fields=["reference"], name="payments_pa_referen_929528_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymenttransaction",
            index=models.Index(fields=["status"], name="payments_pa_status_b58fc4_idx"),
        ),
        migrations.AddIndex(
            model_name="paymenttransaction",
            index=models.Index(
                fields=["paystack_reference"], name="payments_pa_paystac_ce4e8c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymenttransaction",
            index=models.Index(fields=["user"], name="payments_pa_user_id_e9fd9a_idx"),
        ),
    ]
